on: 
  push:
    paths-ignore: 
      - 'README.md'  
  workflow_dispatch:
    inputs:
      environmentselector:
        description: 'Environment selector'     
        required: false
        default: 'default'

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment Setp
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '' -or $envSelector -eq 'default') {        
            if ('${{ github.ref }}' -eq 'refs/heads/main') {
              echo "::set-output name=build_env::prod"
            } else {
              echo "::set-output name=build_env::dev"
            }
          } else {
            echo "::set-output name=build_env::$envSelector"            
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}      

  resolve_resources:
    name: Resolve resources
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:    
      - uses: actions/checkout@v2
  
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: resolve-shared-resources
        name: Resolve shared resources
        working-directory: .\deployment
        run: |
          .\ResolveSharedResources.ps1 -BUILD_ENV ${{ needs.setup.outputs.build_env }}
    outputs:
      priResourceGroup: ${{ steps.resolve-shared-resources.outputs.priResourceGroup }}            
      drResourceGroup: ${{ steps.resolve-shared-resources.outputs.drResourceGroup }}      
      sourceIp: ${{ steps.resolve-shared-resources.outputs.sourceIp }}  

  deploy_pri_vnet:
    name: Deploy primary vnet
    needs: 
      - resolve_resources
      - setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:    
      - uses: actions/checkout@v2
  
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Build primary vnet
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: '${{ needs.setup.outputs.build_env }}-pri-vnet-${{ github.run_number }}'
          resourceGroupName: ${{ needs.resolve_resources.outputs.priResourceGroup }}
          template: ./deployment/deploy.bicep
          parameters: >            
            ipPrefix=10
            sourceIp=${{ needs.resolve_resources.outputs.sourceIp }}          
            prefix=pri
            location=centralus
            deployPublicIp=${{ needs.resolve_resources.outputs.deployPublicIp }}
    outputs:
      vnetName: ${{ steps.deploy.outputs.vnetName }}

  deploy_dr_vnet:
    name: Deploy dr vnet
    needs: 
      - resolve_resources
      - setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:    
      - uses: actions/checkout@v2
  
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Build dr vnet
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: '${{ needs.setup.outputs.build_env }}-dr-vnet-${{ github.run_number }}'
          resourceGroupName: ${{ needs.resolve_resources.outputs.drResourceGroup }}
          template: ./deployment/deploy.bicep
          parameters: >            
            ipPrefix=172
            sourceIp=${{ needs.resolve_resources.outputs.sourceIp }}
            prefix=dr
            location=eastus2
            deployPublicIp=false
    outputs:
      vnetName: ${{ steps.deploy.outputs.vnetName }}

  peer_pri_dr_vnet:
    name: Peer pri to dr vnet
    needs: 
      - resolve_resources
      - setup
      - deploy_pri_vnet
      - deploy_dr_vnet
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:    
      - uses: actions/checkout@v2
  
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Peer pri to dr vnet
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: '${{ needs.setup.outputs.build_env }}-pri-dr-vnet-peer-${{ github.run_number }}'
          resourceGroupName: ${{ needs.resolve_resources.outputs.priResourceGroup }}
          template: ./deployment/peering.bicep
          parameters: >            
            srcVnetName=${{ needs.deploy_pri_vnet.outputs.vnetName }}
            destVnetName=${{ needs.deploy_dr_vnet.outputs.vnetName }}
            destResourceGroupName=${{ needs.resolve_resources.outputs.drResourceGroup }}
            srcToDestPeerName=pri-dr

  peer_dr_pri_vnet:
    name: Peer dr to pri vnet
    needs: 
      - resolve_resources
      - setup
      - deploy_pri_vnet
      - deploy_dr_vnet
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:    
      - uses: actions/checkout@v2
  
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Peer dr to pri vnet
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: '${{ needs.setup.outputs.build_env }}-dr-pri-vnet-peer-${{ github.run_number }}'
          resourceGroupName: ${{ needs.resolve_resources.outputs.drResourceGroup }}
          template: ./deployment/peering.bicep
          parameters: >            
            srcVnetName=${{ needs.deploy_dr_vnet.outputs.vnetName }}
            destVnetName=${{ needs.deploy_pri_vnet.outputs.vnetName }}
            destResourceGroupName=${{ needs.resolve_resources.outputs.priResourceGroup }}
            srcToDestPeerName=dr-pri